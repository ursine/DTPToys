# Try to find Wayland on a Unix system
#
# This will define:
#
#   WAYLAND_FOUND       - True if Wayland is found
#   WAYLAND_LIBRARIES   - Link these to use Wayland
#   WAYLAND_INCLUDE_DIR - Include directory for Wayland
#   WAYLAND_DEFINITIONS - Compiler flags for using Wayland
#
# In addition the following more fine grained variables will be defined:
#
#   WAYLAND_CLIENT_FOUND  WAYLAND_CLIENT_INCLUDE_DIR  WAYLAND_CLIENT_LIBRARIES
#   WAYLAND_SERVER_FOUND  WAYLAND_SERVER_INCLUDE_DIR  WAYLAND_SERVER_LIBRARIES
#   WAYLAND_EGL_FOUND     WAYLAND_EGL_INCLUDE_DIR     WAYLAND_EGL_LIBRARIES
#   WAYLAND_CURSOR_FOUND  WAYLAND_CURSOR_INCLUDE_DIR  WAYLAND_CURSOR_LIBRARIES
#
# Copyright (c) 2013 Martin Gräßlin <mgraesslin@kde.org>
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.

IF (NOT WIN32)
  IF (WAYLAND_INCLUDE_DIR AND WAYLAND_LIBRARIES)
    # In the cache already
    SET(WAYLAND_FIND_QUIETLY TRUE)
  ENDIF ()

  # Use pkg-config to get the directories and then use these values
  # in the FIND_PATH() and FIND_LIBRARY() calls
  FIND_PACKAGE(PkgConfig)
  FIND_PACKAGE(OpenGL REQUIRED)
  PKG_CHECK_MODULES(PKG_WAYLAND QUIET waylandpp)
  PKG_CHECK_MODULES(EGL_REQUIRED egl)

  SET(WAYLAND_DEFINITIONS ${PKG_WAYLAND_CFLAGS})

  FIND_PATH(WAYLAND_CLIENT_INCLUDE_DIR       NAMES wayland-client.hpp                HINTS ${PKG_WAYLAND_INCLUDE_DIRS})
  FIND_PATH(WAYLAND_EGL_INCLUDE_DIR          NAMES wayland-egl.hpp                   HINTS ${PKG_WAYLAND_INCLUDE_DIRS})
  FIND_PATH(WAYLAND_CURSOR_INCLUDE_DIR       NAMES wayland-cursor.hpp                HINTS ${PKG_WAYLAND_INCLUDE_DIRS})
  FIND_PATH(WAYLAND_UTIL_INCLUDE_DIR         NAMES wayland-util.hpp                  HINTS ${PKG_WAYLAND_INCLUDE_DIRS})
  FIND_PATH(WAYLAND_CLIENT_EXTRA_INCLUDE_DIR NAMES wayland-client-protocol-extra.hpp HINTS ${PKG_WAYLAND_INCLUDE_DIRS})
  FIND_PATH(WAYLAND_VERSION_DIR              NAMES wayland-version.hpp               HINTS ${PKG_WAYLAND_INCLUDE_DIRS})

  FIND_LIBRARY(WAYLAND_CLIENT_LIBRARIES       NAMES libwayland-client++       HINTS ${PKG_WAYLAND_LIBRARY_DIRS})
  FIND_LIBRARY(WAYLAND_CLIENT_EXTRA_LIBRARIES NAMES libwayland-client-extra++ HINTS ${PKG_WAYLAND_LIBRARY_DIRS})
  FIND_LIBRARY(WAYLAND_EGL_LIBRARIES          NAMES libwayland-egl++          HINTS ${PKG_WAYLAND_LIBRARY_DIRS})
  FIND_LIBRARY(WAYLAND_CURSOR_LIBRARIES       NAMES libwayland-cursor++       HINTS ${PKG_WAYLAND_LIBRARY_DIRS})

  SET(WAYLAND_INCLUDE_DIR ${WAYLAND_CLIENT_INCLUDE_DIR} ${WAYLAND_UTIL_INCLUDE_DIR}
          ${WAYLAND_EGL_INCLUDE_DIR} ${WAYLAND_CURSOR_INCLUDE_DIR} ${WAYLAND_CLIENT_EXTRA_INCLUDE_DIR}
          ${WAYLAND_VERSION_DIR})

  SET(WAYLAND_LIBRARIES ${WAYLAND_CLIENT_LIBRARIES} ${WAYLAND_CLIENT_EXTRA_LIBRARIES}
          ${WAYLAND_EGL_LIBRARIES} ${WAYLAND_CURSOR_LIBRARIES})

  LIST(REMOVE_DUPLICATES WAYLAND_INCLUDE_DIR)

  #include(FindPackageHandleStandardArgs)

  #PKG_GET_VARIABLE(WAYLAND_PROTOCOLS_DIR wayland-protocols pkgdatadir)

  # Find wayland-scanner
  #find_program(WAYLAND_SCANNER_CMD NAMES wayland-scanner++)

  #MESSAGE("Wayland protocol xml directory: ${WAYLAND_PROTOCOLS_DIR}")
  #MESSAGE("Wayland protocol scanner cmd: ${WAYLAND_SCANNER_CMD}")

  #set(WAYLAND_XDG_SHELL_XML "${WAYLAND_PROTOCOLS_DIR}/stable/xdg-shell/xdg-shell.xml")

  #MESSAGE("XDG file: ${WAYLAND_XDG_SHELL_XML}")

  #FIND_PACKAGE_HANDLE_STANDARD_ARGS(Wayland         DEFAULT_MSG  WAYLAND_LIBRARIES         WAYLAND_INCLUDE_DIR)

  MARK_AS_ADVANCED(
       WAYLAND_INCLUDE_DIR         WAYLAND_LIBRARIES
  )

ENDIF ()
